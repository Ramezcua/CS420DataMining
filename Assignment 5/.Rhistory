temp$Cluster <- NULL
# Update the centroids
centroids <- UpdateCentroids(df, centroids, k)
#Update each point's associated cluster
df$Cluster <- apply(temp, 1,FindCluster, centroids)
current.clusters <- as.vector(df$Cluster)
inactive.clusters <- ClusterRepCheck(c(1:k), current.clusters)
if (inactive.clusters[1] != 0){
SSEResults <- CentroidSSEVector(df, centroids, inactive.clusters)
active.clusters <- SSEResults$clusters
SSEList <- SSEResults$SSE
for(i in inactive.clusters){
max.index <- which.max(SSEList)
#Get index of first available point
candidate.index <- which(df[,"Cluster"] == active.clusters[1])[1]
# Give that point to the inactive cluster i
df[candidate.index, "Cluster"] <- i
#Remove the used max cluster for the next candidate
active.clusters <- active.clusters[-(max.index)]
SSEList <- SSEList[-(max.index)]
}
}
if (measure.SSE){
#Measure the SSE and add it to the SSE vector
# Can use ALLCLusterSSE need df, k, and clusters
append(SSE, AllClusterSSE(temp, k, df$Cluster))
}
if (StoppingCondition(previous.clusters, current.clusters, DIFF.THRESH)){
stopped <- TRUE
}
}
print(SSE)
return (as.vector(df$Cluster))
}
MyKMeans(iris.kmeans, 3, measure.SSE=TRUE)
iris.test$Sepal.Length
MyKMeans <-function(df, k, measure.SSE=FALSE){
natt <- ncol(df)
centroids <- as.data.frame(matrix(data=0, nrow=k, ncol=natt))
# Adding a cluster column and randomly assigning each point to a cluster
df["Cluster"] <- NA
df$Cluster <- sample(1:k, nrow(df), replace=TRUE)
SSE <- NULL #This is used when measuring overall SSE
stopped <- FALSE
while(!stopped){
previous.clusters <- as.vector(df$Cluster)
# remove cluster column for easier calculation
temp <- df
temp$Cluster <- NULL
# Update the centroids
centroids <- UpdateCentroids(df, centroids, k)
#Update each point's associated cluster
df$Cluster <- apply(temp, 1,FindCluster, centroids)
current.clusters <- as.vector(df$Cluster)
inactive.clusters <- ClusterRepCheck(c(1:k), current.clusters)
if (inactive.clusters[1] != 0){
SSEResults <- CentroidSSEVector(df, centroids, inactive.clusters)
active.clusters <- SSEResults$clusters
SSEList <- SSEResults$SSE
for(i in inactive.clusters){
max.index <- which.max(SSEList)
#Get index of first available point
candidate.index <- which(df[,"Cluster"] == active.clusters[1])[1]
# Give that point to the inactive cluster i
df[candidate.index, "Cluster"] <- i
#Remove the used max cluster for the next candidate
active.clusters <- active.clusters[-(max.index)]
SSEList <- SSEList[-(max.index)]
}
}
if (measure.SSE){
#Measure the SSE and add it to the SSE vector
# Can use ALLCLusterSSE need df, k, and clusters
append(SSE, AllClusterSSE(temp, k, as.vector(df$Cluster)))
print(SSE)
}
if (StoppingCondition(previous.clusters, current.clusters, DIFF.THRESH)){
stopped <- TRUE
}
}
print(SSE)
return (as.vector(df$Cluster))
}
MyKMeans(iris.kmeans, 3, measure.SSE=TRUE)
MyKMeans <-function(df, k, measure.SSE=FALSE){
natt <- ncol(df)
centroids <- as.data.frame(matrix(data=0, nrow=k, ncol=natt))
# Adding a cluster column and randomly assigning each point to a cluster
df["Cluster"] <- NA
df$Cluster <- sample(1:k, nrow(df), replace=TRUE)
SSE <- NULL #This is used when measuring overall SSE
stopped <- FALSE
while(!stopped){
previous.clusters <- as.vector(df$Cluster)
# remove cluster column for easier calculation
temp <- df
temp$Cluster <- NULL
# Update the centroids
centroids <- UpdateCentroids(df, centroids, k)
#Update each point's associated cluster
df$Cluster <- apply(temp, 1,FindCluster, centroids)
current.clusters <- as.vector(df$Cluster)
inactive.clusters <- ClusterRepCheck(c(1:k), current.clusters)
if (inactive.clusters[1] != 0){
SSEResults <- CentroidSSEVector(df, centroids, inactive.clusters)
active.clusters <- SSEResults$clusters
SSEList <- SSEResults$SSE
for(i in inactive.clusters){
max.index <- which.max(SSEList)
#Get index of first available point
candidate.index <- which(df[,"Cluster"] == active.clusters[1])[1]
# Give that point to the inactive cluster i
df[candidate.index, "Cluster"] <- i
#Remove the used max cluster for the next candidate
active.clusters <- active.clusters[-(max.index)]
SSEList <- SSEList[-(max.index)]
}
}
if (measure.SSE){
#Measure the SSE and add it to the SSE vector
# Can use ALLCLusterSSE need df, k, and clusters
current.sse <- AllClusterSSE(temp, k, as.vector(df$Cluster))
print(current.sse)
}
if (StoppingCondition(previous.clusters, current.clusters, DIFF.THRESH)){
stopped <- TRUE
}
}
print(SSE)
return (as.vector(df$Cluster))
}
MyKMeans(iris.kmeans, 3, measure.SSE=TRUE)
?append
MyKMeans <-function(df, k, measure.SSE=FALSE){
natt <- ncol(df)
centroids <- as.data.frame(matrix(data=0, nrow=k, ncol=natt))
# Adding a cluster column and randomly assigning each point to a cluster
df["Cluster"] <- NA
df$Cluster <- sample(1:k, nrow(df), replace=TRUE)
SSE <- NULL #This is used when measuring overall SSE
stopped <- FALSE
while(!stopped){
previous.clusters <- as.vector(df$Cluster)
# remove cluster column for easier calculation
temp <- df
temp$Cluster <- NULL
# Update the centroids
centroids <- UpdateCentroids(df, centroids, k)
#Update each point's associated cluster
df$Cluster <- apply(temp, 1,FindCluster, centroids)
current.clusters <- as.vector(df$Cluster)
inactive.clusters <- ClusterRepCheck(c(1:k), current.clusters)
if (inactive.clusters[1] != 0){
SSEResults <- CentroidSSEVector(df, centroids, inactive.clusters)
active.clusters <- SSEResults$clusters
SSEList <- SSEResults$SSE
for(i in inactive.clusters){
max.index <- which.max(SSEList)
#Get index of first available point
candidate.index <- which(df[,"Cluster"] == active.clusters[1])[1]
# Give that point to the inactive cluster i
df[candidate.index, "Cluster"] <- i
#Remove the used max cluster for the next candidate
active.clusters <- active.clusters[-(max.index)]
SSEList <- SSEList[-(max.index)]
}
}
if (measure.SSE){
#Measure the SSE and add it to the SSE vector
# Can use ALLCLusterSSE need df, k, and clusters
current.sse <- AllClusterSSE(temp, k, as.vector(df$Cluster))
print(current.sse)
append(SSE, current.sse)
}
if (StoppingCondition(previous.clusters, current.clusters, DIFF.THRESH)){
stopped <- TRUE
}
}
print(SSE)
return (as.vector(df$Cluster))
}
?append
MyKMeans(iris.kmeans, 3, measure.SSE=TRUE)
MyKMeans <-function(df, k, measure.SSE=FALSE){
natt <- ncol(df)
centroids <- as.data.frame(matrix(data=0, nrow=k, ncol=natt))
# Adding a cluster column and randomly assigning each point to a cluster
df["Cluster"] <- NA
df$Cluster <- sample(1:k, nrow(df), replace=TRUE)
SSE <- NULL
overall.SSE <- NULL
stopped <- FALSE
while(!stopped){
previous.clusters <- as.vector(df$Cluster)
# remove cluster column for easier calculation
temp <- df
temp$Cluster <- NULL
# Update the centroids
centroids <- UpdateCentroids(df, centroids, k)
#Update each point's associated cluster
df$Cluster <- apply(temp, 1,FindCluster, centroids)
current.clusters <- as.vector(df$Cluster)
inactive.clusters <- ClusterRepCheck(c(1:k), current.clusters)
if (inactive.clusters[1] != 0){
SSEResults <- CentroidSSEVector(df, centroids, inactive.clusters)
active.clusters <- SSEResults$clusters
SSEList <- SSEResults$SSE
for(i in inactive.clusters){
max.index <- which.max(SSEList)
#Get index of first available point
candidate.index <- which(df[,"Cluster"] == active.clusters[1])[1]
# Give that point to the inactive cluster i
df[candidate.index, "Cluster"] <- i
#Remove the used max cluster for the next candidate
active.clusters <- active.clusters[-(max.index)]
SSEList <- SSEList[-(max.index)]
}
}
if (measure.SSE){
#Measure the SSE and add it to the SSE vector
# Can use ALLCLusterSSE need df, k, and clusters
current.SSE <- AllClusterSSE(temp, k, as.vector(df$Cluster))
print(current.SSE)
append(overall.SSE, current.SSE)
}
if (StoppingCondition(previous.clusters, current.clusters, DIFF.THRESH)){
stopped <- TRUE
}
}
print(SSE)
return (as.vector(df$Cluster))
}
MyKMeans <-function(df, k, measure.SSE=FALSE){
natt <- ncol(df)
centroids <- as.data.frame(matrix(data=0, nrow=k, ncol=natt))
# Adding a cluster column and randomly assigning each point to a cluster
df["Cluster"] <- NA
df$Cluster <- sample(1:k, nrow(df), replace=TRUE)
SSE <- NULL
overall.SSE <- NULL
stopped <- FALSE
while(!stopped){
previous.clusters <- as.vector(df$Cluster)
# remove cluster column for easier calculation
temp <- df
temp$Cluster <- NULL
# Update the centroids
centroids <- UpdateCentroids(df, centroids, k)
#Update each point's associated cluster
df$Cluster <- apply(temp, 1,FindCluster, centroids)
current.clusters <- as.vector(df$Cluster)
inactive.clusters <- ClusterRepCheck(c(1:k), current.clusters)
if (inactive.clusters[1] != 0){
SSEResults <- CentroidSSEVector(df, centroids, inactive.clusters)
active.clusters <- SSEResults$clusters
SSEList <- SSEResults$SSE
for(i in inactive.clusters){
max.index <- which.max(SSEList)
#Get index of first available point
candidate.index <- which(df[,"Cluster"] == active.clusters[1])[1]
# Give that point to the inactive cluster i
df[candidate.index, "Cluster"] <- i
#Remove the used max cluster for the next candidate
active.clusters <- active.clusters[-(max.index)]
SSEList <- SSEList[-(max.index)]
}
}
if (measure.SSE){
#Measure the SSE and add it to the SSE vector
# Can use ALLCLusterSSE need df, k, and clusters
current.SSE <- AllClusterSSE(temp, k, as.vector(df$Cluster))
print(current.SSE)
append(overall.SSE, current.SSE)
}
if (StoppingCondition(previous.clusters, current.clusters, DIFF.THRESH)){
stopped <- TRUE
}
}
print(overall.SSE)
return (as.vector(df$Cluster))
}
MyKMeans(iris.kmeans, 3, measure.SSE=TRUE)
x <-NULL
append(x,1)
MyKMeans <-function(df, k, measure.SSE=FALSE){
natt <- ncol(df)
centroids <- as.data.frame(matrix(data=0, nrow=k, ncol=natt))
# Adding a cluster column and randomly assigning each point to a cluster
df["Cluster"] <- NA
df$Cluster <- sample(1:k, nrow(df), replace=TRUE)
SSE <- NULL
overall.SSE <- NULL
stopped <- FALSE
while(!stopped){
previous.clusters <- as.vector(df$Cluster)
# remove cluster column for easier calculation
temp <- df
temp$Cluster <- NULL
# Update the centroids
centroids <- UpdateCentroids(df, centroids, k)
#Update each point's associated cluster
df$Cluster <- apply(temp, 1,FindCluster, centroids)
current.clusters <- as.vector(df$Cluster)
inactive.clusters <- ClusterRepCheck(c(1:k), current.clusters)
if (inactive.clusters[1] != 0){
SSEResults <- CentroidSSEVector(df, centroids, inactive.clusters)
active.clusters <- SSEResults$clusters
SSEList <- SSEResults$SSE
for(i in inactive.clusters){
max.index <- which.max(SSEList)
#Get index of first available point
candidate.index <- which(df[,"Cluster"] == active.clusters[1])[1]
# Give that point to the inactive cluster i
df[candidate.index, "Cluster"] <- i
#Remove the used max cluster for the next candidate
active.clusters <- active.clusters[-(max.index)]
SSEList <- SSEList[-(max.index)]
}
}
if (measure.SSE){
#Measure the SSE and add it to the SSE vector
# Can use ALLCLusterSSE need df, k, and clusters
current.SSE <- AllClusterSSE(temp, k, as.vector(df$Cluster))
print(current.SSE)
append(overall.SSE, as.numeric(current.SSE))
}
if (StoppingCondition(previous.clusters, current.clusters, DIFF.THRESH)){
stopped <- TRUE
}
}
print(overall.SSE)
return (as.vector(df$Cluster))
}
MyKMeans(iris.kmeans, 3, measure.SSE=TRUE)
x
x <- c(x, 1)
x
MyKMeans <-function(df, k, measure.SSE=FALSE){
natt <- ncol(df)
centroids <- as.data.frame(matrix(data=0, nrow=k, ncol=natt))
# Adding a cluster column and randomly assigning each point to a cluster
df["Cluster"] <- NA
df$Cluster <- sample(1:k, nrow(df), replace=TRUE)
SSE <- NULL
overall.SSE <- NULL
stopped <- FALSE
while(!stopped){
previous.clusters <- as.vector(df$Cluster)
# remove cluster column for easier calculation
temp <- df
temp$Cluster <- NULL
# Update the centroids
centroids <- UpdateCentroids(df, centroids, k)
#Update each point's associated cluster
df$Cluster <- apply(temp, 1,FindCluster, centroids)
current.clusters <- as.vector(df$Cluster)
inactive.clusters <- ClusterRepCheck(c(1:k), current.clusters)
if (inactive.clusters[1] != 0){
SSEResults <- CentroidSSEVector(df, centroids, inactive.clusters)
active.clusters <- SSEResults$clusters
SSEList <- SSEResults$SSE
for(i in inactive.clusters){
max.index <- which.max(SSEList)
#Get index of first available point
candidate.index <- which(df[,"Cluster"] == active.clusters[1])[1]
# Give that point to the inactive cluster i
df[candidate.index, "Cluster"] <- i
#Remove the used max cluster for the next candidate
active.clusters <- active.clusters[-(max.index)]
SSEList <- SSEList[-(max.index)]
}
}
if (measure.SSE){
#Measure the SSE and add it to the SSE vector
# Can use ALLCLusterSSE need df, k, and clusters
current.SSE <- AllClusterSSE(temp, k, as.vector(df$Cluster))
print(current.SSE)
overall.SSE <- c(overall.SSE, as.numeric(current.SSE)))
}
if (StoppingCondition(previous.clusters, current.clusters, DIFF.THRESH)){
stopped <- TRUE
}
}
print(overall.SSE)
return (as.vector(df$Cluster))
}
MyKMeans <-function(df, k, measure.SSE=FALSE){
natt <- ncol(df)
centroids <- as.data.frame(matrix(data=0, nrow=k, ncol=natt))
# Adding a cluster column and randomly assigning each point to a cluster
df["Cluster"] <- NA
df$Cluster <- sample(1:k, nrow(df), replace=TRUE)
SSE <- NULL
overall.SSE <- NULL
stopped <- FALSE
while(!stopped){
previous.clusters <- as.vector(df$Cluster)
# remove cluster column for easier calculation
temp <- df
temp$Cluster <- NULL
# Update the centroids
centroids <- UpdateCentroids(df, centroids, k)
#Update each point's associated cluster
df$Cluster <- apply(temp, 1,FindCluster, centroids)
current.clusters <- as.vector(df$Cluster)
inactive.clusters <- ClusterRepCheck(c(1:k), current.clusters)
if (inactive.clusters[1] != 0){
SSEResults <- CentroidSSEVector(df, centroids, inactive.clusters)
active.clusters <- SSEResults$clusters
SSEList <- SSEResults$SSE
for(i in inactive.clusters){
max.index <- which.max(SSEList)
#Get index of first available point
candidate.index <- which(df[,"Cluster"] == active.clusters[1])[1]
# Give that point to the inactive cluster i
df[candidate.index, "Cluster"] <- i
#Remove the used max cluster for the next candidate
active.clusters <- active.clusters[-(max.index)]
SSEList <- SSEList[-(max.index)]
}
}
if (measure.SSE){
#Measure the SSE and add it to the SSE vector
# Can use ALLCLusterSSE need df, k, and clusters
current.SSE <- AllClusterSSE(temp, k, as.vector(df$Cluster))
print(current.SSE)
overall.SSE <- c(overall.SSE, as.numeric(current.SSE))
}
if (StoppingCondition(previous.clusters, current.clusters, DIFF.THRESH)){
stopped <- TRUE
}
}
print(overall.SSE)
return (as.vector(df$Cluster))
}
MyKMeans(iris.kmeans, 3, measure.SSE=TRUE)
MyKMeans <-function(df, k, measure.SSE=FALSE){
natt <- ncol(df)
centroids <- as.data.frame(matrix(data=0, nrow=k, ncol=natt))
# Adding a cluster column and randomly assigning each point to a cluster
df["Cluster"] <- NA
df$Cluster <- sample(1:k, nrow(df), replace=TRUE)
SSE <- NULL
overall.SSE <- NULL
stopped <- FALSE
while(!stopped){
previous.clusters <- as.vector(df$Cluster)
# remove cluster column for easier calculation
temp <- df
temp$Cluster <- NULL
# Update the centroids
centroids <- UpdateCentroids(df, centroids, k)
#Update each point's associated cluster
df$Cluster <- apply(temp, 1,FindCluster, centroids)
current.clusters <- as.vector(df$Cluster)
inactive.clusters <- ClusterRepCheck(c(1:k), current.clusters)
if (inactive.clusters[1] != 0){
SSEResults <- CentroidSSEVector(df, centroids, inactive.clusters)
active.clusters <- SSEResults$clusters
SSEList <- SSEResults$SSE
for(i in inactive.clusters){
max.index <- which.max(SSEList)
#Get index of first available point
candidate.index <- which(df[,"Cluster"] == active.clusters[1])[1]
# Give that point to the inactive cluster i
df[candidate.index, "Cluster"] <- i
#Remove the used max cluster for the next candidate
active.clusters <- active.clusters[-(max.index)]
SSEList <- SSEList[-(max.index)]
}
}
if (measure.SSE){
#Measure the SSE and add it to the SSE vector
current.SSE <- AllClusterSSE(temp, k, as.vector(df$Cluster))
overall.SSE <- c(overall.SSE, as.numeric(current.SSE))
}
if (StoppingCondition(previous.clusters, current.clusters, DIFF.THRESH)){
stopped <- TRUE
}
}
return (list(Cluster=as.vector(df$Cluster), SSE=overall.SSE))
}
k.two.result <- MyKMeans(iris.kmeans, 2)
k.two.clusters <- k.two.result$Cluster
table(iris$Species, k.two.clusters)
# K equal to 2
k.two.result <- MyKMeans(iris.kmeans, 2)
k.two.clusters <- k.two.result$Cluster
# K equal to 3
k.three.result <- MyKMeans(iris.kmeans, 3)
k.three.clusters <- k.three.resul$Cluster
# K equal to 4
k.four.result <- MyKMeans(iris.kmeans, 4)
k.four.clusters <- k.four.result$Cluster
k.three.clusters <- k.three.result$Cluster
table(iris$Species, k.two.clusters)
table(iris$Species, k.three.clusters)
table(iris$Species, k.four.clusters)
k.two.result <- MyKMeans(iris.kmeans, 2, TRUE)
k.two.SSE <- k.two.result$SSE
plot(as.data.frame(k.two.SSE))
print(as.data.frame(k.two.SSE))
plot(k.two.SSE, c(1:length(k.two.SSE)))
plot(k.two.SSE, c(1:length(k.two.SSE)), xlab="SSE", ylab="Iteration", main="My Kmeans, K = 2")
plot(k.two.SSE, c(1:length(k.two.SSE)), xlab="SSE", ylab="Iteration", main="My KMeans, K = 2")
?system.time
system.time(append(x,1))
system.time(k.two.result <- MyKMeans(iris.kmeans, 2, TRUE)
)
k.two.time <- system.time(k.two.result <- MyKMeans(iris.kmeans, 2))
k.two.clusters <- k.two.result$Cluster
k.two.time
