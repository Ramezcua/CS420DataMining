}
BestSplit(test.set, BinaryGini)
?list
rownum(spambase)
?rownum
nrow(spambase)
ncol(spambase)
BestSplit <- function(df, RatingFunction){
# 58 is a magic number because it refers to the last row in df, which is spam in spambase
# Didn't have time to figure out how formula works
# Making the best pick for the att 1, which is as high as possible
# This ensures that it will be replaced
best.pick <- 1
#Warning: this only work when the class is the last column
number.attributes <- ncol(df) - 1
for (i in 1:number.attributes){
att.num <- 1
sorted.values <- sort(df[,att.num])
temp.continous.frame <- data.frame(value = numeric(0),
not.spam.above = numeric(0),
not.spam.below = numeric(0),
spam.above = numeric(0),
spam.below = numeric(0),
rating = numeric(0))
# Create the split points for continous attributes
split.points <- MakeSplitPoints(unique(sorted.values))
# Sort the data frame by the selected attribute
sorted.df <- df[order(df[,att.num]),] # Sort the data frame by the selected attribute
### Finding the rating for all possible split points and putting them in
### tempcontinous.frame
# find the spam and not spam for the first
first.above.not.spam <- 0
first.above.spam <- 0
for (i in 1:nrow(sorted.df)){
if (sorted.df[i,58] == 'not_spam'){ first.above.not.spam <- first.above.not.spam + 1}
else {first.above.spam <- first.above.spam + 1}
}
# Add them to the temp data frame that will hold all values
temp.continous.frame <- rbind(temp.continous.frame, data.frame(
value = split.points[1],
not.spam.above = first.above.not.spam,
not.spam.below = 0,
spam.above = first.above.spam,
spam.below = 0,
rating = RatingFunction(first.above.not.spam, first.above.spam) ))
# Now go through the other split points
for (j in 2:length(split.points)){
# Values for the last entry in temp frame (used for split point checking)
k <- j - 1
ns.above <- temp.continous.frame[k, "not.spam.above"]
ns.below <- temp.continous.frame[k, "not.spam.below"]
s.above <- temp.continous.frame[k, "spam.above"]
s.below <- temp.continous.frame[k, "spam.below"]
# Check if the first entry
while(split.points[j] > sorted.df[1,att.num]){
if (sorted.df[1, 58] == 'not_spam') {
# a point must be moved from not spam above to not spam below
ns.below <- ns.below + 1
ns.above <- ns.above - 1
} else if (sorted.df[1,58] == 'spam'){
# a point must be moved from spam above to spam below
s.below <- s.below + 1
s.above <- s.above - 1
}
# Now the entry must be erased from sorted.df so it doesn't get counted again
sorted.df <- sorted.df[-1,]
}
# All points under split point j have been counted and so j must be added to the
# temp data frame
s1 <- (ns.above + s.above)/ (ns.above + s.above + ns.below + s.below)
s2 <- (ns.below + s.below)/ (ns.above + s.above + ns.below + s.below)
temp.continous.frame <- rbind(temp.continous.frame, data.frame(
value = split.points[j],
not.spam.above = ns.above,
not.spam.below = ns.below,
spam.above = s.above,
spam.below = s.below,
rating =  s1*(RatingFunction(ns.above, s.above)) +
s2*(RatingFunction(ns.below, s.below)) ))
}
# Result contains the data frame of the attribute number, the best split value, and
# it's rating
result <- temp.continous.frame[which.min(temp.continous.frame$"rating"),]
# Check the current best in temp frame against the best pick
if (best.pick > result[3]){
best.pick <- list(att.num, result[1,'value'], result[1,'rating'])
}
}
return best.pick
}
BestSplit(test.set, BinaryGini)
BestSplit <- function(df, RatingFunction){
# 58 is a magic number because it refers to the last row in df, which is spam in spambase
# Didn't have time to figure out how formula works
# Making the best pick for the att 1, which is as high as possible
# This ensures that it will be replaced
best.pick <- 1
#Warning: this only work when the class is the last column
number.attributes <- ncol(df) - 1
for (i in 1:number.attributes){
att.num <- 1
sorted.values <- sort(df[,att.num])
temp.continous.frame <- data.frame(value = numeric(0),
not.spam.above = numeric(0),
not.spam.below = numeric(0),
spam.above = numeric(0),
spam.below = numeric(0),
rating = numeric(0))
# Create the split points for continous attributes
split.points <- MakeSplitPoints(unique(sorted.values))
# Sort the data frame by the selected attribute
sorted.df <- df[order(df[,att.num]),] # Sort the data frame by the selected attribute
### Finding the rating for all possible split points and putting them in
### tempcontinous.frame
# find the spam and not spam for the first
first.above.not.spam <- 0
first.above.spam <- 0
for (i in 1:nrow(sorted.df)){
if (sorted.df[i,58] == 'not_spam'){ first.above.not.spam <- first.above.not.spam + 1}
else {first.above.spam <- first.above.spam + 1}
}
# Add them to the temp data frame that will hold all values
temp.continous.frame <- rbind(temp.continous.frame, data.frame(
value = split.points[1],
not.spam.above = first.above.not.spam,
not.spam.below = 0,
spam.above = first.above.spam,
spam.below = 0,
rating = RatingFunction(first.above.not.spam, first.above.spam) ))
# Now go through the other split points
for (j in 2:length(split.points)){
# Values for the last entry in temp frame (used for split point checking)
k <- j - 1
ns.above <- temp.continous.frame[k, "not.spam.above"]
ns.below <- temp.continous.frame[k, "not.spam.below"]
s.above <- temp.continous.frame[k, "spam.above"]
s.below <- temp.continous.frame[k, "spam.below"]
# Check if the first entry
while(split.points[j] > sorted.df[1,att.num]){
if (sorted.df[1, 58] == 'not_spam') {
# a point must be moved from not spam above to not spam below
ns.below <- ns.below + 1
ns.above <- ns.above - 1
} else if (sorted.df[1,58] == 'spam'){
# a point must be moved from spam above to spam below
s.below <- s.below + 1
s.above <- s.above - 1
}
# Now the entry must be erased from sorted.df so it doesn't get counted again
sorted.df <- sorted.df[-1,]
}
# All points under split point j have been counted and so j must be added to the
# temp data frame
s1 <- (ns.above + s.above)/ (ns.above + s.above + ns.below + s.below)
s2 <- (ns.below + s.below)/ (ns.above + s.above + ns.below + s.below)
temp.continous.frame <- rbind(temp.continous.frame, data.frame(
value = split.points[j],
not.spam.above = ns.above,
not.spam.below = ns.below,
spam.above = s.above,
spam.below = s.below,
rating =  s1*(RatingFunction(ns.above, s.above)) +
s2*(RatingFunction(ns.below, s.below)) ))
}
# Result contains the data frame of the attribute number, the best split value, and
# it's rating
result <- temp.continous.frame[which.min(temp.continous.frame$"rating"),]
# Check the current best in temp frame against the best pick
if (best.pick > result[3]){
best.pick <- list(att.num, result[1,'value'], result[1,'rating'])
}
}
return best.pick
}
BestSplit(test.set, BinaryGini)
BestSplit <- function(df, RatingFunction){
# 58 is a magic number because it refers to the last row in df, which is spam in spambase
# Didn't have time to figure out how formula works
# Making the best pick for the att 1, which is as high as possible
# This ensures that it will be replaced
best.pick <- 1
#Warning: this only work when the class is the last column
number.attributes <- ncol(df) - 1
for (i in 1:number.attributes){
att.num <- 1
sorted.values <- sort(df[,att.num])
temp.continous.frame <- data.frame(value = numeric(0),
not.spam.above = numeric(0),
not.spam.below = numeric(0),
spam.above = numeric(0),
spam.below = numeric(0),
rating = numeric(0))
# Create the split points for continous attributes
split.points <- MakeSplitPoints(unique(sorted.values))
# Sort the data frame by the selected attribute
sorted.df <- df[order(df[,att.num]),] # Sort the data frame by the selected attribute
### Finding the rating for all possible split points and putting them in
### tempcontinous.frame
# find the spam and not spam for the first
first.above.not.spam <- 0
first.above.spam <- 0
for (i in 1:nrow(sorted.df)){
if (sorted.df[i,58] == 'not_spam'){ first.above.not.spam <- first.above.not.spam + 1}
else {first.above.spam <- first.above.spam + 1}
}
# Add them to the temp data frame that will hold all values
temp.continous.frame <- rbind(temp.continous.frame, data.frame(
value = split.points[1],
not.spam.above = first.above.not.spam,
not.spam.below = 0,
spam.above = first.above.spam,
spam.below = 0,
rating = RatingFunction(first.above.not.spam, first.above.spam) ))
# Now go through the other split points
for (j in 2:length(split.points)){
# Values for the last entry in temp frame (used for split point checking)
k <- j - 1
ns.above <- temp.continous.frame[k, "not.spam.above"]
ns.below <- temp.continous.frame[k, "not.spam.below"]
s.above <- temp.continous.frame[k, "spam.above"]
s.below <- temp.continous.frame[k, "spam.below"]
# Check if the first entry
while(split.points[j] > sorted.df[1,att.num]){
if (sorted.df[1, 58] == 'not_spam') {
# a point must be moved from not spam above to not spam below
ns.below <- ns.below + 1
ns.above <- ns.above - 1
} else if (sorted.df[1,58] == 'spam'){
# a point must be moved from spam above to spam below
s.below <- s.below + 1
s.above <- s.above - 1
}
# Now the entry must be erased from sorted.df so it doesn't get counted again
sorted.df <- sorted.df[-1,]
}
# All points under split point j have been counted and so j must be added to the
# temp data frame
s1 <- (ns.above + s.above)/ (ns.above + s.above + ns.below + s.below)
s2 <- (ns.below + s.below)/ (ns.above + s.above + ns.below + s.below)
temp.continous.frame <- rbind(temp.continous.frame, data.frame(
value = split.points[j],
not.spam.above = ns.above,
not.spam.below = ns.below,
spam.above = s.above,
spam.below = s.below,
rating =  s1*(RatingFunction(ns.above, s.above)) +
s2*(RatingFunction(ns.below, s.below)) ))
}
# Result contains the data frame of the attribute number, the best split value, and
# it's rating
result <- temp.continous.frame[which.min(temp.continous.frame$"rating"),]
# Check the current best in temp frame against the best pick
if (best.pick > result[3]){
best.pick <- list(att.num, result[1,'value'], result[1,'rating'])
}
return best.pick
}
BestSplit(test.set, BinaryGini)
fix(BestSplit)
BestSplit <- function(df, RatingFunction){
# 58 is a magic number because it refers to the last row in df, which is spam in spambase
# Didn't have time to figure out how formula works
# Making the best pick for the att 1, which is as high as possible
# This ensures that it will be replaced
best.pick <- 1
#Warning: this only work when the class is the last column
number.attributes <- ncol(df) - 1
for (i in 1:number.attributes){
att.num <- 1
sorted.values <- sort(df[,att.num])
temp.continous.frame <- data.frame(value = numeric(0),
not.spam.above = numeric(0),
not.spam.below = numeric(0),
spam.above = numeric(0),
spam.below = numeric(0),
rating = numeric(0))
# Create the split points for continous attributes
split.points <- MakeSplitPoints(unique(sorted.values))
# Sort the data frame by the selected attribute
sorted.df <- df[order(df[,att.num]),] # Sort the data frame by the selected attribute
### Finding the rating for all possible split points and putting them in
### tempcontinous.frame
# find the spam and not spam for the first
first.above.not.spam <- 0
first.above.spam <- 0
for (i in 1:nrow(sorted.df)){
if (sorted.df[i,58] == 'not_spam'){ first.above.not.spam <- first.above.not.spam + 1}
else {first.above.spam <- first.above.spam + 1}
}
# Add them to the temp data frame that will hold all values
temp.continous.frame <- rbind(temp.continous.frame, data.frame(
value = split.points[1],
not.spam.above = first.above.not.spam,
not.spam.below = 0,
spam.above = first.above.spam,
spam.below = 0,
rating = RatingFunction(first.above.not.spam, first.above.spam) ))
# Now go through the other split points
for (j in 2:length(split.points)){
# Values for the last entry in temp frame (used for split point checking)
k <- j - 1
ns.above <- temp.continous.frame[k, "not.spam.above"]
ns.below <- temp.continous.frame[k, "not.spam.below"]
s.above <- temp.continous.frame[k, "spam.above"]
s.below <- temp.continous.frame[k, "spam.below"]
# Check if the first entry
while(split.points[j] > sorted.df[1,att.num]){
if (sorted.df[1, 58] == 'not_spam') {
# a point must be moved from not spam above to not spam below
ns.below <- ns.below + 1
ns.above <- ns.above - 1
} else if (sorted.df[1,58] == 'spam'){
# a point must be moved from spam above to spam below
s.below <- s.below + 1
s.above <- s.above - 1
}
# Now the entry must be erased from sorted.df so it doesn't get counted again
sorted.df <- sorted.df[-1,]
}
# All points under split point j have been counted and so j must be added to the
# temp data frame
s1 <- (ns.above + s.above)/ (ns.above + s.above + ns.below + s.below)
s2 <- (ns.below + s.below)/ (ns.above + s.above + ns.below + s.below)
temp.continous.frame <- rbind(temp.continous.frame, data.frame(
value = split.points[j],
not.spam.above = ns.above,
not.spam.below = ns.below,
spam.above = s.above,
spam.below = s.below,
rating =  s1*(RatingFunction(ns.above, s.above)) +
s2*(RatingFunction(ns.below, s.below)) ))
}
# Result contains the data frame of the attribute number, the best split value, and
# it's rating
result <- temp.continous.frame[which.min(temp.continous.frame$"rating"),]
# Check the current best in temp frame against the best pick
if (best.pick > result[3]){
best.pick <- list(att.num, result[1,'value'], result[1,'rating'])
}
#return best.pick
}
}
BestSplit(test.set, BinaryGini)
BestSplit <- function(df, RatingFunction){
# 58 is a magic number because it refers to the last row in df, which is spam in spambase
# Didn't have time to figure out how formula works
# Making the best pick for the att 1, which is as high as possible
# This ensures that it will be replaced
best.pick <- 1
#Warning: this only work when the class is the last column
number.attributes <- ncol(df) - 1
for (i in 1:number.attributes){
att.num <- 1
sorted.values <- sort(df[,att.num])
temp.continous.frame <- data.frame(value = numeric(0),
not.spam.above = numeric(0),
not.spam.below = numeric(0),
spam.above = numeric(0),
spam.below = numeric(0),
rating = numeric(0))
# Create the split points for continous attributes
split.points <- MakeSplitPoints(unique(sorted.values))
# Sort the data frame by the selected attribute
sorted.df <- df[order(df[,att.num]),] # Sort the data frame by the selected attribute
### Finding the rating for all possible split points and putting them in
### tempcontinous.frame
# find the spam and not spam for the first
first.above.not.spam <- 0
first.above.spam <- 0
for (i in 1:nrow(sorted.df)){
if (sorted.df[i,58] == 'not_spam'){ first.above.not.spam <- first.above.not.spam + 1}
else {first.above.spam <- first.above.spam + 1}
}
# Add them to the temp data frame that will hold all values
temp.continous.frame <- rbind(temp.continous.frame, data.frame(
value = split.points[1],
not.spam.above = first.above.not.spam,
not.spam.below = 0,
spam.above = first.above.spam,
spam.below = 0,
rating = RatingFunction(first.above.not.spam, first.above.spam) ))
# Now go through the other split points
for (j in 2:length(split.points)){
# Values for the last entry in temp frame (used for split point checking)
k <- j - 1
ns.above <- temp.continous.frame[k, "not.spam.above"]
ns.below <- temp.continous.frame[k, "not.spam.below"]
s.above <- temp.continous.frame[k, "spam.above"]
s.below <- temp.continous.frame[k, "spam.below"]
# Check if the first entry
while(split.points[j] > sorted.df[1,att.num]){
if (sorted.df[1, 58] == 'not_spam') {
# a point must be moved from not spam above to not spam below
ns.below <- ns.below + 1
ns.above <- ns.above - 1
} else if (sorted.df[1,58] == 'spam'){
# a point must be moved from spam above to spam below
s.below <- s.below + 1
s.above <- s.above - 1
}
# Now the entry must be erased from sorted.df so it doesn't get counted again
sorted.df <- sorted.df[-1,]
}
# All points under split point j have been counted and so j must be added to the
# temp data frame
s1 <- (ns.above + s.above)/ (ns.above + s.above + ns.below + s.below)
s2 <- (ns.below + s.below)/ (ns.above + s.above + ns.below + s.below)
temp.continous.frame <- rbind(temp.continous.frame, data.frame(
value = split.points[j],
not.spam.above = ns.above,
not.spam.below = ns.below,
spam.above = s.above,
spam.below = s.below,
rating =  s1*(RatingFunction(ns.above, s.above)) +
s2*(RatingFunction(ns.below, s.below)) ))
}
# Result contains the data frame of the attribute number, the best split value, and
# it's rating
result <- temp.continous.frame[which.min(temp.continous.frame$"rating"),]
# Check the current best in temp frame against the best pick
if (best.pick > result[3]){
best.pick <- list(att.num, result[1,'value'], result[1,'rating'])
}
}
return(best.pick)
}
BestSplit(test.set, BinaryGini)
best.pick <- list(0, 0, 1)
BestSplit <- function(df, RatingFunction){
# 58 is a magic number because it refers to the last row in df, which is spam in spambase
# Didn't have time to figure out how formula works
# Making the best pick for the att 1, which is as high as possible
# This ensures that it will be replaced
best.pick <- list(0, 0, 1)
#Warning: this only work when the class is the last column
number.attributes <- ncol(df) - 1
for (i in 1:number.attributes){
att.num <- 1
sorted.values <- sort(df[,att.num])
temp.continous.frame <- data.frame(value = numeric(0),
not.spam.above = numeric(0),
not.spam.below = numeric(0),
spam.above = numeric(0),
spam.below = numeric(0),
rating = numeric(0))
# Create the split points for continous attributes
split.points <- MakeSplitPoints(unique(sorted.values))
# Sort the data frame by the selected attribute
sorted.df <- df[order(df[,att.num]),] # Sort the data frame by the selected attribute
### Finding the rating for all possible split points and putting them in
### tempcontinous.frame
# find the spam and not spam for the first
first.above.not.spam <- 0
first.above.spam <- 0
for (i in 1:nrow(sorted.df)){
if (sorted.df[i,58] == 'not_spam'){ first.above.not.spam <- first.above.not.spam + 1}
else {first.above.spam <- first.above.spam + 1}
}
# Add them to the temp data frame that will hold all values
temp.continous.frame <- rbind(temp.continous.frame, data.frame(
value = split.points[1],
not.spam.above = first.above.not.spam,
not.spam.below = 0,
spam.above = first.above.spam,
spam.below = 0,
rating = RatingFunction(first.above.not.spam, first.above.spam) ))
# Now go through the other split points
for (j in 2:length(split.points)){
# Values for the last entry in temp frame (used for split point checking)
k <- j - 1
ns.above <- temp.continous.frame[k, "not.spam.above"]
ns.below <- temp.continous.frame[k, "not.spam.below"]
s.above <- temp.continous.frame[k, "spam.above"]
s.below <- temp.continous.frame[k, "spam.below"]
# Check if the first entry
while(split.points[j] > sorted.df[1,att.num]){
if (sorted.df[1, 58] == 'not_spam') {
# a point must be moved from not spam above to not spam below
ns.below <- ns.below + 1
ns.above <- ns.above - 1
} else if (sorted.df[1,58] == 'spam'){
# a point must be moved from spam above to spam below
s.below <- s.below + 1
s.above <- s.above - 1
}
# Now the entry must be erased from sorted.df so it doesn't get counted again
sorted.df <- sorted.df[-1,]
}
# All points under split point j have been counted and so j must be added to the
# temp data frame
s1 <- (ns.above + s.above)/ (ns.above + s.above + ns.below + s.below)
s2 <- (ns.below + s.below)/ (ns.above + s.above + ns.below + s.below)
temp.continous.frame <- rbind(temp.continous.frame, data.frame(
value = split.points[j],
not.spam.above = ns.above,
not.spam.below = ns.below,
spam.above = s.above,
spam.below = s.below,
rating =  s1*(RatingFunction(ns.above, s.above)) +
s2*(RatingFunction(ns.below, s.below)) ))
}
# Result contains the data frame of the attribute number, the best split value, and
# it's rating
result <- temp.continous.frame[which.min(temp.continous.frame$"rating"),]
# Check the current best in temp frame against the best pick
if (best.pick[3] > result[3]){
best.pick <- list(att.num, result[1,'value'], result[1,'rating'])
}
}
return(best.pick)
}
BestSplit(test.set, BinaryGini)
